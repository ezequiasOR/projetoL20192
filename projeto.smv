MODULE main
VAR
	pessoa:{Morador,Visitante};
	semaforoEntrada:boolean;
  	semaforoSaida:boolean;
  	estacionamento:process portao(semaforoEntrada, semaforoSaida);

ASSIGN
  	init(semaforoEntrada) := FALSE;
  	init(semaforoSaida) := FALSE;
	init(pessoa) := Morador;
	next(pessoa) := case
		pessoa = Morador:Morador;
		pessoa = Visitante:Visitante;
		TRUE: pessoa;
	esac;

	
	LTLSPEC G(F(pessoa = Morador -> estacionamento.eMorador = TRUE));
	LTLSPEC G(F(pessoa = Visitante -> estacionamento.eMorador = FALSE));

	LTLSPEC G(F((estacionamento.eMorador = TRUE & estacionamento.estado = entrando) -> (estacionamento.autorizacao = AutorizacaoTrintaDias)));
	LTLSPEC G(F((estacionamento.eMorador = FALSE & estacionamento.estado = entrando) -> (estacionamento.autorizacao = AutorizacaoUmDia)));

	LTLSPEC G(F((estacionamento.estado = aguardando) -> (estacionamento.autorizacao = SemAutorizacao)));
	
	--Relação entre as duas cancelas e o espaço critico ocupado (espaco entre
	as duas cancelas)
	INVARSPEC (estacionamento.estado = aguardando -> estacionamento.critico = FALSE);
	INVARSPEC (estacionamento.estado = entrando -> estacionamento.critico = TRUE);
	INVARSPEC (estacionamento.estado = saindo -> estacionamento.critico = TRUE);

	
	--Relação entre os dois semáforos.
	INVARSPEC (semaforoEntrada = TRUE -> semaforoSaida = FALSE);
	INVARSPEC (semaforoSaida = TRUE -> semaforoEntrada = FALSE);

	
	--Especificação das flags.
	INVARSPEC (estacionamento.flag_entrando = TRUE -> estacionamento.flag_saindo = FALSE)
	INVARSPEC (estacionamento.flag_saindo = TRUE -> estacionamento.flag_entrando = FALSE)
	
	
	--Relação enter os portões
	INVARSPEC (estacionamento.estado = cP_aberta -> estacionamento.cancelaS = FALSE)
	INVARSPEC (estacionamento.estado = cS_aberta -> estacionamento.cancelaP = FALSE)

	--Limite de vagas
	INVARSPEC (estacionamento.vagas >= 0 & estacionamento.vagas <= 30)

-------------------------------------------------------------------------------------------------

MODULE portao(semaforoEntrada, semaforoSaida)
VAR
  	estado : {aguardando, ocupado, entrando, saindo, cP_aberta, cP_fechada, cS_aberta, cS_fechada, livre};
  	autorizacao:{SemAutorizacao,AutorizacaoTrintaDias,AutorizacaoUmDia};
  	eMorador: boolean;
  	cancelaE: boolean;
  	cancelaS: boolean;
  	critico: boolean;
  	flag_entrando: boolean;
  	flag_saindo: boolean;
  	vagas: 0..30;
	moradores: 0..10;
	visitantes: 0..20;

ASSIGN
  	init(cancelaE) := FALSE;
  	init(cancela2) := FALSE;
  	init(critico) := FALSE;
  	init(flag_entrando) := FALSE;
  	init(flag_saindo) := FALSE;
	init(eMorador) := FALSE;
  	init(vagas) := 0;
	init(moradores) := 0;
	init(visitantes) := 0;
  
  init(autorizacao) := SemAutorizacao;
  init(estado) := aguardando;
   
  next(autorizacao) :=
  case
	--Funcionamento Geral das Autorizações
	autorizacao = SemAutorizacao: {AutorizacaoTrintaDias,AutorizacaoUmDia};
	autorizacao = AutorizacaoTrintaDias: {SemAutorizacao};
	autorizacao = AutorizacaoUmDia: {SemAutorizacao};

	
	--Recebimento da autorizacao
	(autorizacao = SemAutorizacao) & (eMorador) & (estado = entrando): AutorizacaoTrintaDias;
	(autorizacao = SemAutorizacao) & (!eMorador) & (estado = entrando): AutorizacaoUmDia;

   TRUE: autorizacao;
   esac;
	
  next(estado) := 
  case 

    estado = aguardando : {aguardando, ocupado};
    estado = ocupado : {entrando, saindo};
    
-- Fluxo de entrada
  -- Cancela Primeira
    (estado = entrando) & (semaforoEntrada=TRUE) & (vagas < 30) & (autorizacao != SemAutorizacao): cP_aberta;
    (estado = cP_aberta) & (cancelaP=FALSE): cP_fechada;

  --Cancela Segunda
    (estado = cP_fechada) & (cancelaS=TRUE): cS_aberta;
    (estado = cS_aberta) & (cancelaS=FALSE): cS_fechada;

  --Fim da entrada
    (estado = c2_fechada) & (flag_entrando=TRUE): livre;
	

-- Fluxo de saida
  --Cancela Segunda
    (estado = saindo) & (semaforoSaida=TRUE) & (vagas > 0): cS_aberta;
    (estado = cS_aberta) & (cancelaS=FALSE):  cS_fechada;

  --Cancela Primeira
    (estado = cS_fechada) & (cancelaP=TRUE):  cP_aberta;
    (estado = cP_aberta) & (cancelaP=FALSE):  cP_fechada;

  --Fim da saida
    (estado = cP_fechada) & (flag_saindo=TRUE): livre;
    
    --Fim da operação
    (estado = livre): aguardando;

    TRUE : estado;
    esac;
  
  next(semaforoEntrada) := 
    case
      (estado = entrando) & (vagas < 30): TRUE;
      estado = saindo: FALSE;
      estado = aguardando: FALSE;
      TRUE : semaforoEntrada;
    esac;

  next(semaforoSaida) := 
    case
      estado = entrando: FALSE;
      (estado = saindo) & (vagas > 0): TRUE;
      estado = aguardando: FALSE;
      TRUE : semaforoSaida;
    esac;

  next(cancelaP) :=
    case
      estado = entrando: TRUE;
      estado = cP_aberta: FALSE;
      estado = cS_fechada: TRUE;
      estado = aguardando: FALSE;
      TRUE: cancelaP;
    esac;

  next(cancelaS) :=
    case
      estado = saindo: TRUE;
      estado = cP_fechada: TRUE;
      estado = cS_aberta: FALSE;
      estado = aguardando: FALSE;
      TRUE: cancelaS;
    esac;

  next(critico) :=
    case
      estado = ocupado: TRUE;
      estado = livre: FALSE;
      TRUE : critico;
    esac;

  next(flag_entrando) :=
    case
      estado = entrando: TRUE;
      estado = saindo: FALSE;
      estado = aguardando: FALSE;
      TRUE: flag_entrando;
    esac;

  next(flag_saindo) :=
    case
      estado = entrando: FALSE;
      estado = saindo: TRUE;
      estado = aguardando: FALSE;
      TRUE: flag_saindo;
    esac;

  next(vagas) :=
  case
    (estado = livre) & (flag_entrando=TRUE) & (vagas < 30) : vagas + 1;
    (estado = livre) & (flag_saindo=TRUE) & (vagas > 0): vagas - 1;
    TRUE: vagas;
  esac;



		
		